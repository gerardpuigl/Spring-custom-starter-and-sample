spring.cloud.stream.kafka.binder.brokers= ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092,localhost:39092,localhost:49092}
spring.cloud.stream.kafka.binder.requiredAcks= all
spring.cloud.stream.kafka.binder.configuration.security.protocol= SASL_SSL
spring.cloud.stream.kafka.binder.configuration.sasl.mechanism= SCRAM-SHA-512
spring.cloud.stream.kafka.binder.configuration.sasl.jaas.config= org.apache.kafka.common.security.scram.ScramLoginModule required username=\"${KAFKA_USER}\" password=\"${KAFKA_PASSWORD}\";
spring.cloud.stream.kafka.binder.producer-properties.key.serializer= io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.binder.producer-properties.value.serializer= io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.binder.producer-properties.schema.registry.url= ${SCHEMA_REGISTRY_URL:http://localhost:8081}
spring.cloud.stream.kafka.binder.consumer-properties.specific.avro.reader= true
spring.cloud.stream.kafka.binder.consumer-properties.key.deserializer= io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.value.deserializer= io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.schema.registry.url= ${SCHEMA_REGISTRY_URL:http://localhost:8081}

#AUTOCREATE TOPICS CONFIG BY DEFAULT WITH LOG COMPACTION AND 3 PARTITIONS
#IT CAN BE OVERWRITTEN IN spring.cloud.stream.kafka.<binding>.producer.topic.properties
spring.cloud.stream.kafka.binder.auto-create-topics=true
spring.cloud.stream.kafka.binder.min-partition-count=3
spring.cloud.stream.kafka.binder.replication-factor=3
spring.cloud.stream.kafka.default.producer.topic.properties.cleanup.policy=compact
spring.cloud.stream.kafka.default.producer.topic.properties.min.compaction.lag.ms=604800000
spring.cloud.stream.kafka.default.producer.topic.properties.max.compaction.lag.ms=864000000
